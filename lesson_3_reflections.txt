When would you want to use a remote repository rather than keeping all your work local?

  You might want to use a remote repository, rather than keeping work locally, when multiple people need to use the repository. If you keep everything locally, people who need to make commits might not be able to access the local repository. If you are the only person who needs access to the content, but you use multiple machines to do so, a remote repository would also be of benefit over keeping content locally.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	Having Git automatically update a local file may lead to content management issues. For example, if there are multiple people working on a branch in the remote, their changes might be made to your local file at a time when you don't want the changes to be made.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	A branch is a "break-off" of code from other branches. A clone is a copy of one or more branches of code. A fork is a clone; the fork is stored locally on GitHub.

What is the benefit of having a copy of the last known state of the remote stored locally?

	Having a copy of the last known state of the remote stored locally enables you to compare what you are working on locally with the remote, to identify and resolve conflicts.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Collaboration without Git or GitHub would require good communication and a content management system that could enable conflict resolution and tracking of changes. I'm guessing other types of content management systems would not have as much automation in merging code, making merging more difficult. The difficulty of GitHub seems to be in becoming knowledgable of and proficient in using its commands and workflows.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	You would want to make changes in a separate branch when you want to add or change something that you want to share with others to review--especially if they are also working on the file and may have conflicting changes, or if you want to experiment with code, but don't want to break the master (because you want to enable the team to use the master with clients, for example).






