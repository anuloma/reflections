What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, a ".git" folder is created. The folder includes files with metadata for tracking changes to associated files, so that commits can be created and maintained.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is different from the working directory in that the working directory is a folder or place for any file, whereas the working directory includes files that are ready to be included in the commit. The repository includes files that are included in the commit, whereas the files in the working directory are not yet included in the commit.

How can you use the staging area to make sure you have one commit per logical
change?

	Each time you make a commit--which is essentially moving code from the staging area to the Git repository--you need to describe what the commit includes. The staging area is effectively a buffer zone, where you move your code to when you are ready to commit with a single logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Situations when branches would be helpful in keeping code history organized include when you want to experiment with code, e.g., adding features that may or may not work, or may or may not be what the customer wants. Branches effectively enable multiple "realities", each with its own history that can be tracked in parallel. Tracking in parallel--rather than in series, requiring confusing skips of individual commits forward and backward--helps keep history organized.

How do the diagrams help you visualize the branch structure?

	A diagram is a visualization; diagramming a branch structure provides a visualization of branches and their respective commit nodes, and how the branches are related to each other.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result of merging two branches together is an amalgam of the two branches, where the commits of each branch are listed together in sequence of when they were made (so commits can be interleaved, depending on time of creation). We represent the amalgam as a new node, showing that they converge into a new larger branch (i.e., including each of the branch's commit nodes).

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Git's automatic merging might reduce manual labor involved in merging code, reducing the time needed to do it, and possibly reducing errors. However, when there is a conflict, one needs to resolve it manually. If we are not always doing merges manually, then we need to know how to use the info Git provides to resolve conflicts, which leads to its own set of issues (e.g., time, knowledge, training needed).
